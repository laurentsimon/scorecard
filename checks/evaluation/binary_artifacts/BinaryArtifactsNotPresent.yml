# Copyright 2023 OpenSSF Scorecard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

short: Checks that binaries are not present in the repository
desc: This rule checks that no binaries are present in the repository
motivation: >
  Including generated executables in the source repository increases user risk. Many programming language systems can generate executables from source code (e.g., C/C++ generated machine code, Java .class files, Python .pyc files, and minified JavaScript). Users will often directly use executables if they are included in the source repository, leading to many dangerous behaviors.

  Problems with generated executable (binary) artifacts include:

  1. Binary artifacts cannot be reviewed, allowing possible obsolete or maliciously subverted executables. Reviews generally review source code, not executables, since it's difficult to audit executables to ensure that they correspond to the source code. Over time the included executables might not correspond to the source code.
  2. Generated executables allow the executable generation process to atrophy, which can lead to an inability to create working executables. These problems can be countered with verified reproducible builds, but it's easier to implement verified reproducible builds when executables are not included in the source repository (since the executable generation process is less likely to have atrophied).
implementation: >
  The rule is implemented by checking files with the following extensions or types: "crx", "deb", "dex", "dey", "elf", "o", "so", "macho", "iso", "class", "jar",
  "bundle", "dylib", "lib", "msi", "dll", "drv", "efi", "exe", "ocx", "pyc", "pyo", "par", "rpm", "wasm", "whl".

  Files that are identified as a graddle wrapper (see https://docs.gradle.org/current/userguide/gradle_wrapper.html) are ignored and handled by the BinaryGraddleWrapperSafe rule.

  Files in the source repository that are simultaneously reviewable source code and executables, since these are reviewable. (Some interpretive systems, such as many operating system shells, don't have a mechanism for storing generated executables that are different from the source file.)
  Source code in the source repository generated by other tools (e.g., by bison, yacc, flex, and lex). There are potential downsides to generated source code, but generated source code tends to be much easier to review and thus presents a lower risk. Generated source code is also often difficult for external tools to detect.
  Generated documentation in source repositories. Generated documentation is intended for use by humans (not computers) who can evaluate the context. Thus, generated documentation doesn't pose the same level of risk.
outcome:
  - If no binary files are present in the repository, the rule returns OutcomePositive (1).
  - If one or more binaries are present in the repository, the rule returns OutcomeNegative (0) for each of the findings.
risk: High
remediation:
  effort: Low
  text:
    - Delete the file from the repository.
  markdown:
    - Delete the file from the repository.
